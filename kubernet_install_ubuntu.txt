Note : https://jhooq.com/kubernetes-error-execution-phase-preflight-preflight/



VVIMP : https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-join/ 






kubeadm join 172.31.8.105:6443 --token yuisp1.jeiyk8c27uaumyqx \
        --discovery-token-unsafe-skip-ca-verification




For Ubuntu 24.04 LTS with all updates, the process is similar but with some modifications. Here’s an updated guide for setting up a multi-node Kubernetes cluster using Kubeadm on Ubuntu 24.04 LTS:



## Prerequisites
- At least two Ubuntu 24.04 LTS servers with 2GB RAM and 2 CPU cores each  t2.micro ( 2nd one) 
- Network connectivity between servers --- ping -- private ip ( ping ) 
- Root access to each server ---- 



Update the system and install dependencies:


sudo apt update && sudo apt upgrade -y
sudo apt install apt-transport-https curl -y


Install containerd:

sudo apt install containerd -y


Configure containerd:

sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml > /dev/null
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
sudo systemctl restart containerd


Disable swap:

sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab


Load necessary kernel modules:

sudo modprobe overlay
sudo modprobe br_netfilter


# Set required sysctl parameters:


cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF
...

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF
...
sudo sysctl --system


Install Kubernetes components:

curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt update
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

--------------------------------------------------------------------------------------------- Till this we have to run all node that in cluster

--------------After this we have to run on master node ( control-plan)  -------- 

Initialize the cluster (run only on master node):

sudo kubeadm init --pod-network-cidr=10.244.0.0/16  ( dont change this ip ) ---- this is for flannel netwrok plugin   ### ( run on master node only ) 


Set up kubeconfig for the user:


mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

KUBECONFIG=$HOME/.kube/config



Install Flannel network plugin (run only on master node):

 wget https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml

 kubectl apply -f kube-flannel.yml


Verify the installation:

kubectl get nodes
kubectl get pods --all-namespaces

#################################
##copilot
But Wait — One More Thing for Single-Node Use
By default, Kubernetes taints the control plane node to prevent scheduling regular pods on it. Since you don’t have worker nodes, you’ll want to remove that taint:

kubectl taint nodes --all node-role.kubernetes.io/control-plane-
kubectl taint nodes <node-name> node-role.kubernetes.io/control-plane=:NoSchedule
#################################


Join worker nodes to the cluster:

Use the kubeadm join command provided by the kubeadm init output on the master node.
Run this command with sudo on each worker node.
kubeadm join 172.31.19.36:6443 --token 922x9d.v0jn4c8he0s286js --discovery-token-ca-cert-hash sha256:8897fd8eb97f2ea0686ccf7507f287ffffd5cf681496fb324940330561c80e4c

### kubeadm token create --print-join-command ## On master to get join command. 


for troubleshooting if your join command will not work 



-- security enable 6443 port to work join command 
-
sudo systemctl restart containerd
sudo systemctl restart kubelet
reboot your machine (may be optional)

====== Incase you are using docker as cri follow theses command open vi /etc/docker/daemon.json change this ["native.cgroupdriver=systemd"] to "exec-opts": ["native.cgroupdriver=cgroupfs"],  ----- (may be optional)


sudo systemctl daemon-reload
sudo systemctl restart kubelet




kubectl create deployment nginx --image=nginx
kubectl expose deployment nginx --type=NodePort --port=80
kubectl get svc nginx



====================================================================================
# Kubernetes Master Setup on Ubuntu 22.04+ (All-in-One)

# 1. Set hostname (optional)
sudo hostnamectl set-hostname master-node

# 2. Disable swap
sudo swapoff -a
sudo sed -i '/swap/d' /etc/fstab

# 3. Load kernel modules
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
br_netfilter
EOF
sudo modprobe br_netfilter

# 4. Set sysctl params
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables=1
net.ipv4.ip_forward=1
net.bridge.bridge-nf-call-ip6tables=1
EOF
sudo sysctl --system

# 5. Install containerd
sudo apt update && sudo apt install -y containerd

# 6. Configure containerd with systemd cgroup driver
sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml > /dev/null
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
sudo systemctl restart containerd
sudo systemctl enable containerd

# 7. Add Kubernetes repo
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt update

# 8. Install Kubernetes core tools
sudo apt install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl
sudo systemctl enable --now kubelet

# 9. Initialize the cluster (using Flannel network CIDR)
sudo kubeadm init --pod-network-cidr=10.244.0.0/16

# 10. Set up kubectl config
mkdir -p $HOME/.kube
sudo cp /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# 11. Deploy Flannel CNI
kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
====================================================================================

====================================================================================
# Full Cleanup on Ubuntu Worker Nod

# 1. Reset the cluster state
sudo kubeadm reset -f

# 2. Stop services
sudo systemctl stop kubelet
sudo systemctl stop containerd

sudo rm -rf ~/.kube
sudo rm -rf /etc/kubernetes
sudo rm -rf /var/lib/etcd
sudo rm -rf /var/lib/kubelet
sudo rm -rf /etc/cni/net.d
sudo rm -rf /var/lib/cni
sudo rm -rf /opt/cni
sudo ip link delete cni0    2>/dev/null
sudo ip link delete flannel.1 2>/dev/null

rm -rf $HOME/.kube
rm -f $HOME/.kube/config

sudo apt remove --purge -y kubeadm kubelet kubectl
sudo apt autoremove -y
sudo apt remove --purge -y containerd
sudo rm -rf /etc/containerd

sudo sed -i '/master-node/d' /etc/hosts

which kubeadm
which kubelet
which kubectl
ls /etc/kubernetes
===============================================================================

====================================================================================
# CentOS Kubernetes Node Setup (All Commands in One Go)

# Set hostname (optional)
sudo hostnamectl set-hostname worker-node

# Disable swap & SELinux
sudo swapoff -a
sudo sed -i '/swap/d' /etc/fstab
sudo setenforce 0
sudo sed -i 's/^SELINUX=enforcing/SELINUX=permissive/' /etc/selinux/config

# Load kernel modules
sudo modprobe overlay
sudo modprobe br_netfilter
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

# Set sysctl parameters
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF
sudo sysctl --system

# Install containerd
sudo dnf install -y yum-utils device-mapper-persistent-data lvm2
sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
sudo dnf install -y containerd.io

# Generate default containerd config and set cgroup driver
sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml > /dev/null
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml

# Start containerd
sudo systemctl daemon-reexec
sudo systemctl enable --now containerd

# Add Kubernetes repo
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://pkgs.k8s.io/core:/stable:/v1.30/rpm/
enabled=1
gpgcheck=1
gpgkey=https://pkgs.k8s.io/core:/stable:/v1.30/rpm/repodata/repomd.xml.key
EOF

# Install Kubernetes tools
sudo dnf install -y kubelet kubeadm kubectl
sudo systemctl enable --now kubelet
====================================================================================

====================================================================================
# Full Cleanup on CentOS Worker Nod

# 1. Reset kubeadm state
sudo kubeadm reset -f

# 2. Stop services
sudo systemctl stop kubelet
sudo systemctl stop containerd

# 3. Clean up Kubernetes & CNI files
sudo rm -rf /etc/kubernetes
sudo rm -rf /var/lib/kubelet
sudo rm -rf /etc/cni/net.d
sudo rm -rf /var/lib/cni
sudo rm -rf ~/.kube

rm -rf $HOME/.kube
rm -f $HOME/.kube/config

# 4. Remove network interfaces (ignore errors if not present)
sudo ip link delete cni0 2>/dev/null
sudo ip link delete flannel.1 2>/dev/null

# 5. Free any occupied Kubernetes-related ports
sudo lsof -ti :10250 | xargs -r sudo kill -9

# 6. Restart core services
sudo systemctl restart containerd
sudo systemctl restart kubelet

# 7. Verify clean state
which kubeadm
which kubelet
which kubectl
ls /etc/kubernetes
==================================================================================	