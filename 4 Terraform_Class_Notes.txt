### GIT TOPIC  ###
# 07 Mar Fri - Terraform-1
# 09 Mar Sun - Terraform-2
# 11 Mar Tue - Terraform-3
# 13 Mar Thu - Terraform-4

================================================================================================================================================================

================================================================================================================================================================
# 07 Mar Fri - Terraform-1


create---box --chart, install, helm ls, rollback
ls list, revision, bug, 
--dry-run--
helm add repo bitnami repourl
helm install box/apache-3.2.12

Terraform brain is API:
Post 
Get
Put
Search on google

Terraform main files:
1. terraform.state
2. terraform.tfvars
3. terraform-provider.tf
4. terraform-instance.tf

Download Extension:
1. HashiCorp Terraform
2. Terraform Advancd Syntax Highlighting - Patrick Miravalle

Terraform code is written in HashiCorp Configuration Language (HCL), a declarative programming language. HCL is used to define infrastructure for DevOps tools and servers.

#What Terraform is:

Terraform is an open-source tool that helps users manage infrastructure as code.
It allows users to create, change, and destroy Infrastructure in a safe and predictable way.
Terraform can be used to manage infrastructure across various cloud platforms. including AWS, Microsoft Azure, and Google Cloud.
It can also be used to automate infrastructure tasks, such as managing Kubernetes clusters and virtual machine images.

#What the logo represents:
The Terraform logo represents the open-source tool that helps users create, manage, and destroy infrastructure across cloud platforms.

Link: https://developer.hashicorp.com/terraform/tutorials/aws-get-started

Get Started - AWS
Build, change, and destroy AWS infrastructure using Terraform. Step-by-step, command-line tutorials will walk you through the Terraform basics for the first time.

What is Infrastructure as Code with Terraform?
Learn how infrastructure as code lets you safely build, change, and manage infrastructure. Try Terraform.

Install Terraform
Install Terraform on Mac, Linux, or Windows by downloading the binary or using a package manager (Homebrew or Chocolatey). Then create a Docker container locally by...

Build infrastructure
Authenticate to AWS and create an EC2 instance under the AWS free tier. Write and validate Terraform configuration, initialize a configuration directory, and plan and apply a configuration to..


Commands:
terraform
tfenv list          # To check no.of version and which version is using current. 
tfenv use 1.10.3    # To use particular version.
terraform --version


aws configure   # For key go the AWS.
aws s3 ls
ls -a ~/.aws/

AWS CLI BUILDER   # To get commands


# S3 creation code.
resource "aws_s3_bucket" "example" {
   bucket = "my-tf-test-bucket"
   tags = {
       name             = "My bucket"
       Environment = "Dev"
    }
}


Cmds:
la -a
terraform init
terraform plan
 - give region name or get default:
 - ap-south-1
 - yes
terraform apply
terraform apply -auto-approve   # To apply directly.

================================================================================================================================================================

================================================================================================================================================================
# 09 Mar Sun - Terraform-2

# local.tf Explantion
resource "local_file" "pet" {
filename = "/root/pets.txt";
content = "We love pets!"
}

resource      = Block Name
"local_file"  = Resource Type
"pet"         = Resource Name

# In Terraform this sybmols meaning while excuting code.
+ = New
- + Delete
~ - Update 

# Print Value
output "tom" {
value = "Hello World"
}
Hi = "Hello How are you"


## All other commands: 

plan - Show changes required by the current configuration
apply - Create or update infrastructure
destroy - Destroy previously-created infrastructure

console - Try Terraform expressions at an interactive command prompt
fmt - Reformat your configuration in the standard style
force-unlock - Release a stuck lock on the current workspace
get - Install or upgrade remote Terraform modules
graph - Generate a Graphviz graph of the steps in an operation
import - Associate existing infrastructure with a Terraform resource
login - Obtain and save credentials for a remote host
logout - Remove locally-stored credentials for a remote host
output - Show output values from your root module
providers - Show the providers required for this configuration
refresh - Update the state to match remote systems
show - Show the current state or a saved plan
state - Advanced state management
taint - Mark a resource instance as not fully functional
test - Remove the 'tainted' state from a resource instance
untaint - Remove the 'tainted' state from a resource instance
version - Show the Eurrent Terraform version
workspace - Workspace management

Global options (use these before the subcommand, if any):
-chdir=DIR - Switch to a different working directory before executing the give subcmmand.
-help - Show this help output, or the help for a specified subcommand.
-version - An alias for the "version" subcommand.


## To install Terraform in Linux
sudo yum install -y yum-utils shadow-utils
sudo yum-config-manager -- add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
sudo yum -y install terraform

terraform validate  # To check mistakes.
terraform fmt   # To format the code.
terraform --help

# tfstate # Its a file, To update Infra, important local.

resource "aws_s3_bucket" "ramu" {
bucket = "terraramu89012"
tags = {
Name = "for fun"
Environment = "stg'
}
}
.

variable "tellyourname" {}
output "user" {
value = "Hello how are you ${var. tellyourname}"
}
.

# To create file using Terraform Code.

variable "print"{
}
resource "local_file" "tej" {
    filename = "/root/mypet/test.tst"
    content - "This is my test file"
	file_permission = "400"
}

# Random Types Example.
resource "local_file" "tej" {
    filename = "${path.module}/test.tst"
    content - "${var.print}'
    file_permission = "400"
}
resource "random_pet" "my-pet" {
prefix = "Mrs"
separator = "-------->"
Length = "1"
}

# Variable
variable "print" {
  default = "This is my new content"
}
variable "prefix" {
}
variable "separator" {
}
variable "length" {
}

# Example of variable
resource "local_file" "tej" {
    content = "${var.print}'
    file_permission = "400"

resource "random_pet" "my-pet" {
prefix = "${var.prefix}"
separator = "${var. separator}"
Length = "${var.length}"
}


## watch terraform.file   # To see live output of codes using command.

## we change the Termination permssion, so accidenatly no one can delete instance-ec2.

## You can define variable in different file and with same folder, and use with others file. 
There is one way also to define variable in different filders and use - find on google.

================================================================================================================================================================

================================================================================================================================================================
# 11 Mar Tue - Terraform-3

#terrform fmt
#terrform validate
#terrafrom refresh

# Types
variable "username" {
type = string
#type = number
}

# Types Upper ,Lower Title
variable "ueser" {
}
output "test" {
  value = "Hello ${upper(var.ueser)}"
  #value = "Hello ${lower(var.ueser)}"
  #value = "Hello ${title(var.ueser)}"
  #value = "${title(var.ueser)}"
}

# Join
variable "ueser" {
type = list
default = ["tom","tej,","ramu","champu","salman"]
}
output "test" {
   value = "${join(var.ueser)}"
}

## This is for create aws ec2 instance

resource "aws_key_pair" "terrafrom" {
  key_name = "terrafrom"
  public_key = "ssh-rsa...................
}

output "print_key" {
  value = "${aws_key_pair.tom.key_pair_id}"
}

resource "aws_instance" "webserver"
      ami="ami-00bb6a80f01f03502"
	  instance_type = "t2.micro"
	  key_name =
tags = {
		 Name = "webserver"
  }
}

================================================================================================================================================================

================================================================================================================================================================
# 13 Mar Thu - Terraform-4

cat id_rsa.pub

# main.tf
resource "aws_key_pair" "salman" {
  key_name = "salman-key25"
  public_key = "ssh-rsa  copy from your server.......biglines
}

resource "aws_security_group" "example" {
name = salman-sg

 egress {
 
   from_port    = 22
   to_port      = 22
   protocol     = "ssh"
   cidr_blocks  = ["0.0.0.0/0"]
 }
}

 ingress {
  from_port     = 80
  to_port       = 80 
  protocol      = "tcp"
  cidr_blocks   = ["0.0.0.0/0"]
 } 
  
 ingress {
  from_port     = 3306
  to_port       = 3306
  protocol      = "tcp"
  cidr_blocks   = ["0.0.0.0/0"]
 } 
 
  egress {
 
   from_port    = 0
   to_port      = 0
   protocol     = "-1"
   cidr_blocks  = ["0.0.0.0/0"]
 }
 
resource "aws_instance" "webserver"{
  ami           = "ami-04b4f1a9cf54c11d0"
  instance_type = "t2.micro"
  key_name      = aws_key_pair.salman.key_name
  
  vpc_security_group_ids = = ["${aws_security_group.salman-sg.id}"]
  user_data =
  #!/bin/bash
  sudo api-get update -y
  sudo apt-get install nginx -y 
  echo "Hello From terraform" > /var/www/html/
EOF
  
  tags = {
    Name = "salmaninstance"
  }
}

================================================================================================================================================================